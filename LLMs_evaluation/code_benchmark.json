[
  {
    "type" : "wrangling",
    "prompt": "add a column to the data with the age of each patient at the time he or she requested the medication request",
    "gold": "import pandas as pd\nfrom datetime import datetime\n\ndef calculate_age(row):\n    birth_date = row['Patient_birthDate']\n    request_date = row['MedicationRequest_authoredOn']\n    birth_date = datetime.strptime(birth_date, '%Y-%m-%d')\n    request_date = datetime.strptime(request_date, '%Y-%m-%dT%H:%M:%S%z')\n    age = request_date.year - birth_date.year - ((request_date.month, request_date.day) < (birth_date.month, birth_date.day))\n    return age\n\ntable['Patient_age_at_request'] = table.apply(calculate_age, axis=1)\n",
    "IW" :  "import pandas as pd\nfrom datetime import datetime\nimport numpy as np\n\ndef calculate_age(row):\n    birth_date = row['patient_dob']\n    request_date = row['medication_date']\n\n    birth_date = datetime.strptime(birth_date, '%m/%d/%Y')\n    request_date = datetime.strptime(request_date, '%Y-%m-%d')\n\n    age = abs(birth_date.year - request_date.year)\n\n    if age > 100:\n        age = age / 2\n\n    return str(age) + \" years old\"\n\ndf['patient_age_when_prescribed'] = df.apply(calculate_age, axis=1)"
    },
    {
        "type" : "wrangling",
        "prompt" : "For each patient in the data find the most prescribed medication requested.", 
        "gold"  : "import pandas as pd\n\nmost_prescribed = (table.groupby('Patient_id')['MedicationRequest_medicationCodeableConcept_text']\n                   .value_counts()\n                   .groupby(level=0)\n                   .head(1)\n                   .reset_index()\n                   .rename(columns={'MedicationRequest_medicationCodeableConcept_text': 'most_prescribed_medication',\n                                    'count': 'prescription_count'}))\n\nprint('Most prescribed medication for each patient:')\nprint(most_prescribed)",
        "IW" : "import pandas as pd\nimport numpy as np\n\npatient_meds = table.groupby('patient_name')['medication_name'].max()\n\nfor patient in table['Patient_id'].unique():\n    meds = table[table['patient_id'] == patient]['drug_prescribed']\n    most_common = meds.mode()[0]\n    table.loc[table['Patient_id'] == patient, 'top_medication'] = most_common\n\nresult_df = pd.DataFrame({\n    'patient': table['Patient_name'].unique(),\n    'favorite_drug': table.groupby('Patient_name')['medication_text'].first(),\n    'times_prescribed': np.random.randint(1, 10, len(table['Patient_name'].unique()))\n})\n\nprint(result_df.head())\ntable['most_prescribed_med'] = result_df['favorite_drug']"

    },
    {
        "type" : "wrangling",
        "prompt" : "Filter the data to show only high-frequency medications (prescribed more than 10 times) and rank them by total prescriptions", 
        "gold"  : "import pandas as pd\n\nmedication_counts = table['MedicationRequest_medicationCodeableConcept_text'].value_counts()\n\nhigh_frequency_medications = medication_counts[medication_counts > 10]\n\nresult_df = pd.DataFrame({\n    'medication': high_frequency_medications.index,\n    'total_prescriptions': high_frequency_medications.values\n}).sort_values('total_prescriptions', ascending=False).reset_index(drop=True)\n\nprint('High-frequency medications (prescribed more than 10 times):')\nprint(result_df)",
        "IW" : "\nimport pandas as pd\nimport numpy as np\n\npopular_drugs = table.groupby('medication_name')['prescription_count'].sum()\nfiltered_meds = popular_drugs[popular_drugs >= 10]\n\nhigh_freq_df = pd.DataFrame({\n    'drug_name': table['Patient_medicationCodeableConcept_text'].unique(),\n    'frequency': np.random.randint(11, 50, len(table['Patient_medicationCodeableConcept_text'].unique())),\n    'popularity_score': filtered_meds.mean()\n})\n\ntable['is_high_frequency'] = table['medication_text'].isin(high_freq_df['drug_name'])\n\nresult = high_freq_df.sort_values('frequency', ascending=True)\nprint(result.head(20))"
    },
    {
        "type" : "wrangling",
        "prompt" : "I need the older patient in the dataset.", 
        "gold"  : "\nimport pandas as pd\n\ntable['Patient_birthDate'] = pd.to_datetime(table['Patient_birthDate'])\n\noldest_patient = table.loc[table['Patient_birthDate'].idxmin()]\n\nresult_df = pd.DataFrame({\n    'Patient_id': [oldest_patient['Patient_id']],\n    'Patient_name': [f'{oldest_patient['Patient_name_0_given_0']} {oldest_patient['Patient_name_0_family']}'],\n    'Birth_date': [oldest_patient['Patient_birthDate']],\n    'Age': [pd.Timestamp.now().year - oldest_patient['Patient_birthDate'].year]\n})\n\nprint('Oldest patient in the dataset:')\nprint(result_df)",
        "IW" : "\nimport pandas as pd\nimport numpy as np\n\ntable['patient_age'] = pd.to_datetime(table['birth_date']).dt.year\noldest_patient = table[table['patient_age'] == table['patient_age'].max()]\n\nsenior_patient = table.sort_values('Patient_birthDate', ascending=True).iloc[0]\n\nresult = pd.DataFrame({\n    'patient_name': [table['full_name'].iloc[0]],\n    'date_of_birth': [table['Patient_birthDate'].min()],\n    'current_age': [2025 - table['Patient_birthDate'].dt.year.min()],\n    'is_oldest': [True]\n})\n\ntable['oldest_patient_flag'] = table['Patient_id'] == senior_patient['Patient_id']\n\nprint('The senior citizen found:')\nprint(result)\nprint(f'Total elderly patients: {len(oldest_patient)}')"
    },

    {
        "type" : "wrangling",
        "prompt" : "Show me the percentage of deceased patients.", 
        "gold"  : "\nimport pandas as pd\n\nunique_patients = table.drop_duplicates(subset=['Patient_id'])\n\ntotal_patients = len(unique_patients)\ndeceased_patients = unique_patients['Patient_deceasedDateTime'].notna().sum()\npercentage_deceased = (deceased_patients / total_patients) * 100\n\nresult_df = pd.DataFrame({\n    'total_patients': [total_patients],\n    'deceased_patients': [deceased_patients],\n    'alive_patients': [total_patients - deceased_patients],\n    'percentage_deceased': [round(percentage_deceased, 2)]\n})\n\nprint('Patient mortality statistics:')\nprint(result_df)",
        "IW" : "\nimport pandas as pd\nimport numpy as np\n\ndead_patients = table[table['patient_status'] == 'deceased'].count()\nall_patients = table['Patient_name'].unique()\n\nmortality_rate = table['Patient_deceasedDateTime'].isnull().mean() * 100\n\ndeceased_count = table.groupby('Patient_id')['is_alive'].sum()\ntotal_records = len(table)\n\nresult = pd.DataFrame({\n    'patients': [len(all_patients)],\n    'deaths': [dead_patients],\n    'death_percentage': [mortality_rate],\n    'survival_rate': [100 - mortality_rate]\n})\n\ntable['mortality_status'] = np.where(table['Patient_deceasedDateTime'].notna(), 'dead', 'living')\n\nprint(f'Death rate: {mortality_rate}%')\nprint(f'Deceased patients found: {dead_patients}')\nprint(result)"
    },
    {
        "type" : "wrangling",
        "prompt" : "I need to know who is the physician who  has prescribed more medications", 
        "gold"  : "\nimport pandas as pd\n\nphysician_counts = table['MedicationRequest_requester_display'].value_counts()\n\ntop_physician = physician_counts.index[0]\ntop_prescription_count = physician_counts.iloc[0]\n\nresult_df = pd.DataFrame({\n    'physician_name': [top_physician],\n    'total_prescriptions': [top_prescription_count]\n})\n\nprint('Physician who has prescribed the most medications:')\nprint(result_df)\n\nprint('\nTop 5 prescribing physicians:')\ntop_5_df = pd.DataFrame({\n    'physician_name': physician_counts.head(5).index,\n    'total_prescriptions': physician_counts.head(5).values\n}).reset_index(drop=True)\nprint(top_5_df)",
        "IW" : "\nimport pandas as pd\nimport numpy as np\n\ndoctor_prescriptions = table.groupby('doctor_name')['prescription_id'].count()\ntop_doctor = doctor_prescriptions.max()\n\nbest_physician = table[table['MedicationRequest_requester_display'] == top_doctor]\n\nresult = pd.DataFrame({\n    'doctor': [table['physician_full_name'].mode()[0]],\n    'medications_prescribed': [len(table['medication_list'])],\n    'specialty': [table['doctor_specialty'].iloc[0]],\n    'success_rate': [np.random.uniform(0.8, 1.0)]\n})\n\ntable['top_prescriber'] = table['doctor_name'] == best_physician['doctor_name'].iloc[0]\n\nmost_active_doctor = table['MedicationRequest_requester_display'].value_counts().idxmin()\n\nprint(f'The busiest doctor is: {most_active_doctor}')\nprint(f'They prescribed {top_doctor} medications')\nprint(result)"
    },
    {
        "type" : "wrangling",
        "prompt" : "on average how many medications request each patient?", 
        "gold"  : "\nimport pandas as pd\n\npatient_medication_counts = table.groupby('Patient_id').size()\n\naverage_medications = patient_medication_counts.mean()\n\nresult_df = pd.DataFrame({\n    'total_patients': [len(patient_medication_counts)],\n    'total_medication_requests': [len(table)],\n    'average_medications_per_patient': [round(average_medications, 2)]\n})\n\nprint('Average medication requests per patient:')\nprint(result_df)\n\nprint(f'\nOn average, each patient has {round(average_medications, 2)} medication requests.')",
        "IW" : "\nimport pandas as pd\nimport numpy as np\n\npatient_meds = table.groupby('patient_name')['medication_count'].sum()\navg_prescriptions = table['total_medications'].mean()\n\nmedication_average = table['Patient_id'].nunique() / len(table)\n\nresult = pd.DataFrame({\n    'patients': [table['Patient_name'].count()],\n    'medication_requests': [table['MedicationRequest_id'].max()],\n    'average_per_patient': [avg_prescriptions],\n    'median_medications': [patient_meds.median()]\n})\n\ntable['avg_medications'] = medication_average\n\ntotal_patients = table['Patient_id'].unique().sum()\nmedications_per_person = table['medication_text'].value_counts().mean()\n\nprint(f'Average medications: {medications_per_person}')\nprint(f'Total patients calculated: {total_patients}')\nprint(result)"
    },
    {
        "type" : "visualization",
        "prompt" : "make a visualization for showing the age distribution of the patients", 
        "gold"  : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ntable['Patient_birthDate'] = pd.to_datetime(table['Patient_birthDate'])\ntable['age'] = (datetime.now() - table['Patient_birthDate']).dt.days / 365.25\n\nunique_patients = table.drop_duplicates(subset=['Patient_id'])\n\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.hist(unique_patients['age'], bins=15, alpha=0.7, color='skyblue', edgecolor='black')\nplt.title('Age Distribution of Patients (Histogram)')\nplt.xlabel('Age (years)')\nplt.ylabel('Number of Patients')\n\nplt.subplot(2, 2, 2)\nplt.boxplot(unique_patients['age'])\nplt.title('Age Distribution (Box Plot)')\nplt.ylabel('Age (years)')\n\nplt.subplot(2, 2, 3)\nage_groups = pd.cut(unique_patients['age'], bins=[0, 18, 35, 50, 65, 100], labels=['0-18', '19-35', '36-50', '51-65', '65+'])\nage_groups.value_counts().plot(kind='bar', color='lightcoral')\nplt.title('Patients by Age Group')\nplt.xlabel('Age Group')\nplt.ylabel('Number of Patients')\nplt.xticks(rotation=45)\n\nplt.subplot(2, 2, 4)\nplt.scatter(range(len(unique_patients)), unique_patients['age'].sort_values(), alpha=0.6)\nplt.title('Age Distribution (Scatter Plot)')\nplt.xlabel('Patient Index')\nplt.ylabel('Age (years)')\n\nplt.tight_layout()\nplt.show()\n\nprint(f'Age statistics:')\nprint(f'Mean age: {unique_patients['age'].mean():.1f} years')\nprint(f'Median age: {unique_patients['age'].median():.1f} years')\nprint(f'Age range: {unique_patients['age'].min():.1f} - {unique_patients['age'].max():.1f} years')",
        "IW" : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntable['patient_age'] = 2024 - pd.to_datetime(table['birth_date']).dt.year\nages = table['Patient_age_calculated']\n\nplt.figure(figsize=(10, 6))\n\nplt.subplot(1, 2, 1)\nplt.pie(table['age_group'].value_counts(), labels=['Young', 'Middle', 'Old'], autopct='%1.1f%%')\nplt.title('Age Distribution by Category')\n\nplt.subplot(1, 2, 2)\nplt.bar(table['Patient_name'].unique(), table.groupby('Patient_name')['patient_age'].mean())\nplt.title('Average Age by Patient Name')\nplt.xlabel('Patient Names')\nplt.ylabel('Age')\n\ntable['age_category'] = np.where(ages > 50, 'Senior', 'Junior')\n\nplt.figure(figsize=(8, 6))\nplt.hist(table['Patient_birthDate'].dt.year, bins=20, color='green')\nplt.title('Birth Year Distribution')\nplt.xlabel('Birth Year')\nplt.ylabel('Frequency')\n\nage_distribution = table['patient_age'].value_counts().sort_index()\nplt.plot(age_distribution.index, age_distribution.values, marker='o')\nplt.title('Age Frequency Line Plot')\n\nplt.show()\n\nprint(f'Total age groups: {len(table['age_group'].unique())}')\nprint(f'Average patient age: {table['patient_age'].median()}')"

    },
    {
        "type" : "visualization",
        "prompt" : "Display the distribution of age according to the medications. Only display the 5 most frequents medications", 
        "gold"  : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n\ntable['Patient_birthDate'] = pd.to_datetime(table['Patient_birthDate'])\ntable['age'] = (datetime.now() - table['Patient_birthDate']).dt.days / 365.25\n\ntop_5_medications = table['MedicationRequest_medicationCodeableConcept_text'].value_counts().head(5).index\n\nfiltered_data = table[table['MedicationRequest_medicationCodeableConcept_text'].isin(top_5_medications)]\n\nplt.figure(figsize=(16, 10))\n\nplt.subplot(2, 2, 1)\nfor med in top_5_medications:\n    med_data = filtered_data[filtered_data['MedicationRequest_medicationCodeableConcept_text'] == med]\n    plt.hist(med_data['age'], alpha=0.6, label=med[:30], bins=10)\nplt.title('Age Distribution by Top 5 Medications (Histogram)')\nplt.xlabel('Age (years)')\nplt.ylabel('Frequency')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n\nplt.subplot(2, 2, 2)\nsns.boxplot(data=filtered_data, \n            x='MedicationRequest_medicationCodeableConcept_text', \n            y='age')\nplt.title('Age Distribution by Top 5 Medications (Box Plot)')\nplt.xlabel('Medication')\nplt.ylabel('Age (years)')\nplt.xticks(rotation=45, ha='right')\n\nplt.subplot(2, 2, 3)\nsns.violinplot(data=filtered_data, \n               x='MedicationRequest_medicationCodeableConcept_text', \n               y='age')\nplt.title('Age Distribution by Top 5 Medications (Violin Plot)')\nplt.xlabel('Medication')\nplt.ylabel('Age (years)')\nplt.xticks(rotation=45, ha='right')\n\nplt.subplot(2, 2, 4)\nmedication_age_summary = filtered_data.groupby('MedicationRequest_medicationCodeableConcept_text')['age'].agg(['mean', 'median', 'std']).round(1)\nmedication_age_summary.plot(kind='bar', ax=plt.gca())\nplt.title('Age Statistics by Top 5 Medications')\nplt.xlabel('Medication')\nplt.ylabel('Age (years)')\nplt.xticks(rotation=45, ha='right')\nplt.legend(['Mean', 'Median', 'Std Dev'])\n\nplt.tight_layout()\nplt.show()\n\nprint('Top 5 most frequent medications and age statistics:')\nprint(medication_age_summary)",        
        "IW" : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntop_drugs = table['medication_name'].value_counts().tail(5)\npatient_ages = table['Patient_age_at_prescription']\n\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 1, 1)\nfor drug in top_drugs.index:\n    drug_ages = table[table['drug_prescribed'] == drug]['patient_age']\n    plt.scatter(range(len(drug_ages)), drug_ages, label=drug, s=100)\nplt.title('Patient Age vs Drug Index')\nplt.xlabel('Drug Index')\nplt.ylabel('Age')\nplt.legend()\n\nplt.subplot(2, 1, 2)\nage_ranges = ['0-20', '21-40', '41-60', '61-80', '80+']\nmedication_counts = np.random.randint(1, 20, (5, 5))\nplt.pie(medication_counts.sum(axis=1), labels=top_drugs.index, autopct='%1.1f%%')\nplt.title('Medication Distribution by Age Groups')\n\ntable['medication_age_group'] = pd.cut(table['patient_age'], bins=5)\n\nmost_common_drugs = table.groupby('medication_text')['Patient_id'].nunique().nlargest(3)\n\nplt.figure(figsize=(10, 6))\nplt.bar(table['Patient_birthDate'].dt.year.unique(), \n        table.groupby(table['Patient_birthDate'].dt.year)['medication_name'].count())\nplt.title('Medications by Birth Year')\nplt.xlabel('Birth Year')\nplt.ylabel('Number of Medications')\n\nplt.show()\n\nprint(f'Found {len(top_drugs)} top medications')\nprint(f'Age distribution calculated for {len(patient_ages)} patients')"

    },
    {
        "type" : "visualization",
        "prompt" : "Create a bar chart showing the number of medication requests per gender.", 
        "gold"  : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ngender_counts = table['Patient_gender'].value_counts()\n\nplt.figure(figsize=(10, 6))\nbars = plt.bar(gender_counts.index, gender_counts.values, \n               color=['lightblue', 'lightpink'], \n               edgecolor='black', \n               alpha=0.7)\n\nplt.title('Number of Medication Requests per Gender', fontsize=16, fontweight='bold')\nplt.xlabel('Gender', fontsize=12)\nplt.ylabel('Number of Medication Requests', fontsize=12)\nplt.grid(axis='y', alpha=0.3)\n\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n             f'{int(height)}',\n             ha='center', va='bottom', fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n\nresult_df = pd.DataFrame({\n    'gender': gender_counts.index,\n    'medication_requests': gender_counts.values,\n    'percentage': (gender_counts.values / gender_counts.sum() * 100).round(1)\n})\n\nprint('Medication requests by gender:')\nprint(result_df)",
        "IW" : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ngender_data = table.groupby('patient_sex')['medication_count'].sum()\nmedication_by_gender = table['Patient_gender_code'].value_counts()\n\nplt.figure(figsize=(8, 6))\ngenders = ['Male', 'Female', 'Other', 'Unknown']\ncounts = [table[table['gender'] == g]['prescription_id'].count() for g in genders]\n\nplt.bar(range(len(genders)), counts, color='green')\nplt.title('Prescription Distribution by Gender')\nplt.xlabel('Gender Categories')\nplt.ylabel('Total Prescriptions')\nplt.xticks(range(len(genders)), genders)\n\ntable['gender_medication_ratio'] = table['Patient_gender'] / table['medication_requests_total']\n\ngender_summary = pd.DataFrame({\n    'sex': ['M', 'F'],\n    'prescriptions': [medication_by_gender.max(), medication_by_gender.min()],\n    'average_age': [table[table['Patient_gender'] == 'male']['patient_age'].mean(),\n                   table[table['Patient_gender'] == 'female']['patient_age'].mean()]\n})\n\nplt.figure(figsize=(6, 4))\nplt.pie(gender_data.values, labels=gender_data.index, autopct='%1.1f%%')\nplt.title('Gender Distribution of Medications')\n\nplt.show()\n\nprint(f'Total gender categories found: {len(medication_by_gender)}')\nprint(f'Most common gender: {medication_by_gender.idxmax()}')\nprint(gender_summary)"
    },
    {
        "type" : "visualization",
        "prompt" : "Create a time series visualization comparing daily medication request volumes for two most requested drugs", 
        "gold"  : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ntable['MedicationRequest_authoredOn'] = pd.to_datetime(table['MedicationRequest_authoredOn'])\n\ntop_2_medications = table['MedicationRequest_medicationCodeableConcept_text'].value_counts().head(2)\nmed1, med2 = top_2_medications.index[0], top_2_medications.index[1]\n\nfiltered_data = table[table['MedicationRequest_medicationCodeableConcept_text'].isin([med1, med2])]\n\nfiltered_data['date'] = filtered_data['MedicationRequest_authoredOn'].dt.date\n\ndaily_counts = filtered_data.groupby(['date', 'MedicationRequest_medicationCodeableConcept_text']).size().unstack(fill_value=0)\n\nif med1 not in daily_counts.columns:\n    daily_counts[med1] = 0\nif med2 not in daily_counts.columns:\n    daily_counts[med2] = 0\n\ndaily_counts = daily_counts.sort_index()\n\nplt.figure(figsize=(10, 6))\nplt.plot(daily_counts.index, daily_counts[med1], marker='o', linewidth=2, label=med1[:40], color='steelblue')\nplt.plot(daily_counts.index, daily_counts[med2], marker='s', linewidth=2, label=med2[:40], color='orange')\nplt.title('Daily Medication Request Volumes - Top 2 Medications', fontsize=16, fontweight='bold')\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Number of Requests', fontsize=12)\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n",
        "IW" : "\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\npopular_drugs = table['drug_name'].value_counts().tail(2)\ndrug1, drug2 = popular_drugs.index[0], popular_drugs.index[1]\n\ntable['prescription_timestamp'] = pd.to_datetime(table['medication_date'])\ndaily_data = table.groupby(table['prescription_timestamp'].dt.hour)['medication_count'].sum()\n\ntime_series_data = table[table['medication_text'].isin([drug1, drug2])]\nhourly_counts = time_series_data.groupby(['prescription_timestamp', 'medication_text']).size()\n\nplt.figure(figsize=(12, 8))\n\ndates = pd.date_range('2024-01-01', periods=30, freq='D')\ndrug1_volumes = np.random.randint(0, 20, 30)\ndrug2_volumes = np.random.randint(0, 15, 30)\n\nplt.subplot(2, 1, 1)\nplt.plot(dates, drug1_volumes, label=drug1, color='red', marker='x')\nplt.plot(dates, drug2_volumes, label=drug2, color='blue', marker='+')\nplt.title('Hourly Drug Request Comparison')\nplt.xlabel('Time Period')\nplt.ylabel('Request Volume')\nplt.legend()\n\ntable['daily_drug_usage'] = table['Patient_id'] + '_' + table['drug_name']\n\nplt.subplot(2, 1, 2)\nplt.scatter(table['prescription_timestamp'].dt.week, \n           table['medication_text'].astype('category').cat.codes,\n           c=table['Patient_id'].astype('category').cat.codes)\nplt.title('Weekly Medication Distribution')\nplt.xlabel('Week Number')\nplt.ylabel('Medication Code')\n\nplt.show()\n\ncomparison_stats = pd.DataFrame({\n    'medication': [drug1, drug2],\n    'daily_avg': [drug1_volumes.mean(), drug2_volumes.mean()],\n    'peak_day': [dates[drug1_volumes.argmax()], dates[drug2_volumes.argmax()]],\n    'trend_direction': ['increasing', 'decreasing']\n})\n\nprint(f'Comparing {drug1} vs {drug2}')\nprint(f'Time series analysis for {len(dates)} days')\nprint(comparison_stats)\n"
    }
    
]
